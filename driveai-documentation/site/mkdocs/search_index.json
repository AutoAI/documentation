{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to DriveAI Technical Docs\n\n\nThis is where we document all of our previous work, current projects, and projections for the future. Here you will find detailed technical specifications for all of our past and current vehicles.\n\n\nWho We Are\n\n\nCurrent Tasks\n\n\nGetting Started\n\n\nIn order to get started, you'll need to become familiar with the following languages and services:\n\n\nProgramming\n\n\n\n\nC++\n is used for our perception packages\n\n\nPython\n is used for control software\n\n\nROS\n ties all of our systems together\n\n\n\n\nEnvironments\n\n\n\n\nLinux\n, specifically Ubuntu, is used by all of our members for developing software.\n\n\n\n\nVersion Control\n\n\n\n\nGit\n knowledge is essential. We use GitHub to manage our codebase and keep everything up to date and organized.\n\n\n\n\nThe DriveAI Knowledge Base\n\n\nRead through what we know so far! Getting up to speed on our current knowledge base is the fastest way to get to the front lines of development.\n\n\nSlack\n\n\nWe use Slack as our primary communications interface. When you're comfortable with everything listed above and want to get involved with the team, send a message to \ncommunity@driveAI.org\n and someone will invite you to our Slack team. That's all there is to it!\n\n\nPrevious Work", 
            "title": "Introduction"
        }, 
        {
            "location": "/#welcome-to-driveai-technical-docs", 
            "text": "This is where we document all of our previous work, current projects, and projections for the future. Here you will find detailed technical specifications for all of our past and current vehicles.", 
            "title": "Welcome to DriveAI Technical Docs"
        }, 
        {
            "location": "/#who-we-are", 
            "text": "", 
            "title": "Who We Are"
        }, 
        {
            "location": "/#current-tasks", 
            "text": "", 
            "title": "Current Tasks"
        }, 
        {
            "location": "/#getting-started", 
            "text": "In order to get started, you'll need to become familiar with the following languages and services:", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#programming", 
            "text": "C++  is used for our perception packages  Python  is used for control software  ROS  ties all of our systems together", 
            "title": "Programming"
        }, 
        {
            "location": "/#environments", 
            "text": "Linux , specifically Ubuntu, is used by all of our members for developing software.", 
            "title": "Environments"
        }, 
        {
            "location": "/#version-control", 
            "text": "Git  knowledge is essential. We use GitHub to manage our codebase and keep everything up to date and organized.", 
            "title": "Version Control"
        }, 
        {
            "location": "/#the-driveai-knowledge-base", 
            "text": "Read through what we know so far! Getting up to speed on our current knowledge base is the fastest way to get to the front lines of development.", 
            "title": "The DriveAI Knowledge Base"
        }, 
        {
            "location": "/#slack", 
            "text": "We use Slack as our primary communications interface. When you're comfortable with everything listed above and want to get involved with the team, send a message to  community@driveAI.org  and someone will invite you to our Slack team. That's all there is to it!", 
            "title": "Slack"
        }, 
        {
            "location": "/#previous-work", 
            "text": "", 
            "title": "Previous Work"
        }, 
        {
            "location": "/birdie/", 
            "text": "The Birdie\n\n\nThe Birdie is our second vehicle. It will be built starting in the Spring of 2016 by members of the DriveAI team.\n\n\nIntroduction\n\n\nAfter completing the Cockroach, we decided that our next vehicle should be larger and more robust to accomodate for our growing capabilities. The go kart frame has reached its maximum potential, and a new vehicle is in order that can expand to meet our needs is needed. Therefore, a street legal golf cart capable of speeds of 25mph with a range of at least 30 miles will be our next purchase.", 
            "title": "Birdie"
        }, 
        {
            "location": "/birdie/#the-birdie", 
            "text": "The Birdie is our second vehicle. It will be built starting in the Spring of 2016 by members of the DriveAI team.", 
            "title": "The Birdie"
        }, 
        {
            "location": "/birdie/#introduction", 
            "text": "After completing the Cockroach, we decided that our next vehicle should be larger and more robust to accomodate for our growing capabilities. The go kart frame has reached its maximum potential, and a new vehicle is in order that can expand to meet our needs is needed. Therefore, a street legal golf cart capable of speeds of 25mph with a range of at least 30 miles will be our next purchase.", 
            "title": "Introduction"
        }, 
        {
            "location": "/cockroach/", 
            "text": "The Cockroach\n\n\nThe \"Cockroach\" is the colloquial name for our first vehicle. It was built over the summer of 2015 by DriveAI. Below is a breakdown of the various aspects of its design.\n\n\nHardware\n\n\n\n\nThe Cockroach began as a \nScooterX Baja 49cc Go-Kart\n.\n\n\nThe frame has been heavily modified. We removed the seat and bolted a sheet of particle board to the frame in its place to house all of the electronics. A custom metal body was bolted to the existing frame to give a more car-like appearance and protect the internals.\n\n\nA custom \n3D-printed gas gas cable actuator housing\n was designed, and uses a standard size servo motor to control acceleration.\n\n\nSteering and braking were actuated using \nFirgelli Automations linear actuators\n bolted directly to the steering column and brake cable, respectively.\n\n\n\n\nElectronics\n\n\n\n\nA 12v lead acid car battery was strapped to the front of the frame to power the systems.\n\n\nThe battery was connected to a combination voltage and current meter to monitor power draw and battery life.\n\n\nThe electrical harness was turned on and off by a 20 amp circuit breaker, which also served as a safety device.\n\n\nThe main power cables supplying the terminal blocks were 8 gauge stranded copper lines.\n\n\nPower distribustion and grounding was handled using screw-type terminal blocks.\n\n\nThe visual processor and decision-making computer was an \nNvidia Jetson Tk1\n.\n\n\nAll visual data was collected from a \nStereoLabs Zed Camera\n and sent to the Jetson over USB 3.0 in real time.\n\n\nActuation was controlled by an \nArduino Mega 2560\n which communicated with the Jetson via serial over USB 2.0.\n\n\nThe actuators themselves were each powered by an [Arduino PWM Motor Shield] (http://www.robotshop.com/en/10a-dc-motor-driver-arduino-shield.html) attached to the terminal blocks.\n\n\nA wireless router is bolted to the underside of the system to allow easy wireless access to be able to ssh into the system from far away.\n\n\n12v to 5v conversion for the arduino and sensors was done by a \nDC to DC converter\n.\n\n\n\n\nSoftware\n\n\n\n\nThe Jetson is running the custom ARM build of Ubuntu 14.04 LTS that Nvidia shipped it with.\n\n\nOur perception package uses the ZED SDK and is written primarily in (C++).\n\n\nThe Arduino actuation controller is written in their proprietary language and is compiled down into AVR.\n\n\nThe software uses the serial interface built into Linux to send commands to the Arduino.\n\n\n\n\nActuation\n\n\nActuation of the Cockroach is controlled by an arduino project that interfaces with the rest of the DriveAI-Platform and operates according to the commands passed to it via serial. \n\n\nSynchronization\n\n\nThe control section operates asynchronously from the rest of the computer, and has a variable refresh rate. By default, the controller updates at 100Hz. Serial can be sent to the controller at any time, and is collected and applied during the next cycle. At the default refresh rate, this results in at most approximately 10-12ms of latency. This is acceptably fast for driving at low speeds, and can be made much faster as needed.\n\n\nEncoding and Transmission\n\n\nEach time the controller is sent a command, it is in the form of one byte of data. We have written an encoder for said data that provides a balance between raw speed and movement precision. Each packet looks like this:\n\n\n\n\nThe first two bits of data indicate which control element is being set. This configuration allows for up to 4 individual controls, which we have assigned as follows:\n\n\n\n\n0b\n00\n - Stop the engine immediately.\n\n\n0b\n01\n - Control steering.\n\n\n0b\n10\n - Control acceleration.\n\n\n0b\n11\n - Control braking.\n\n\n\n\nThe last 6 bits of data represent the position value being written to that control. This translates to an unsigned integer from 0-63. We believe that 64 positions per control is adequate for our current vehicle. It is our intention in the future to increase the precision of these controls for use in larger vehicles. Therefore, the currently established ranges for the controls in hexadecimal are as follows:\n\n\n\n\n0x\n00\n to 0x\n3F\n - Stop the engine immediately.\n\n\n0x\n40\n to 0x\n7F\n - Control steering, with 0x\n40\n being extreme left, and 0x\n7F\n being extreme right.\n\n\n0x\n80\n to 0x\nBF\n - Control acceleration, with 0x\n80\n being full throttle, and 0x\nBF\n being zero throttle.\n\n\n0x\nc0\n to 0x\nFF\n - Control steering, with 0x\nC0\n being no braking, and 0x\nFF\n being full power braking.", 
            "title": "Cockroach"
        }, 
        {
            "location": "/cockroach/#the-cockroach", 
            "text": "The \"Cockroach\" is the colloquial name for our first vehicle. It was built over the summer of 2015 by DriveAI. Below is a breakdown of the various aspects of its design.", 
            "title": "The Cockroach"
        }, 
        {
            "location": "/cockroach/#hardware", 
            "text": "The Cockroach began as a  ScooterX Baja 49cc Go-Kart .  The frame has been heavily modified. We removed the seat and bolted a sheet of particle board to the frame in its place to house all of the electronics. A custom metal body was bolted to the existing frame to give a more car-like appearance and protect the internals.  A custom  3D-printed gas gas cable actuator housing  was designed, and uses a standard size servo motor to control acceleration.  Steering and braking were actuated using  Firgelli Automations linear actuators  bolted directly to the steering column and brake cable, respectively.", 
            "title": "Hardware"
        }, 
        {
            "location": "/cockroach/#electronics", 
            "text": "A 12v lead acid car battery was strapped to the front of the frame to power the systems.  The battery was connected to a combination voltage and current meter to monitor power draw and battery life.  The electrical harness was turned on and off by a 20 amp circuit breaker, which also served as a safety device.  The main power cables supplying the terminal blocks were 8 gauge stranded copper lines.  Power distribustion and grounding was handled using screw-type terminal blocks.  The visual processor and decision-making computer was an  Nvidia Jetson Tk1 .  All visual data was collected from a  StereoLabs Zed Camera  and sent to the Jetson over USB 3.0 in real time.  Actuation was controlled by an  Arduino Mega 2560  which communicated with the Jetson via serial over USB 2.0.  The actuators themselves were each powered by an [Arduino PWM Motor Shield] (http://www.robotshop.com/en/10a-dc-motor-driver-arduino-shield.html) attached to the terminal blocks.  A wireless router is bolted to the underside of the system to allow easy wireless access to be able to ssh into the system from far away.  12v to 5v conversion for the arduino and sensors was done by a  DC to DC converter .", 
            "title": "Electronics"
        }, 
        {
            "location": "/cockroach/#software", 
            "text": "The Jetson is running the custom ARM build of Ubuntu 14.04 LTS that Nvidia shipped it with.  Our perception package uses the ZED SDK and is written primarily in (C++).  The Arduino actuation controller is written in their proprietary language and is compiled down into AVR.  The software uses the serial interface built into Linux to send commands to the Arduino.", 
            "title": "Software"
        }, 
        {
            "location": "/cockroach/#actuation", 
            "text": "Actuation of the Cockroach is controlled by an arduino project that interfaces with the rest of the DriveAI-Platform and operates according to the commands passed to it via serial.   Synchronization  The control section operates asynchronously from the rest of the computer, and has a variable refresh rate. By default, the controller updates at 100Hz. Serial can be sent to the controller at any time, and is collected and applied during the next cycle. At the default refresh rate, this results in at most approximately 10-12ms of latency. This is acceptably fast for driving at low speeds, and can be made much faster as needed.  Encoding and Transmission  Each time the controller is sent a command, it is in the form of one byte of data. We have written an encoder for said data that provides a balance between raw speed and movement precision. Each packet looks like this:   The first two bits of data indicate which control element is being set. This configuration allows for up to 4 individual controls, which we have assigned as follows:   0b 00  - Stop the engine immediately.  0b 01  - Control steering.  0b 10  - Control acceleration.  0b 11  - Control braking.   The last 6 bits of data represent the position value being written to that control. This translates to an unsigned integer from 0-63. We believe that 64 positions per control is adequate for our current vehicle. It is our intention in the future to increase the precision of these controls for use in larger vehicles. Therefore, the currently established ranges for the controls in hexadecimal are as follows:   0x 00  to 0x 3F  - Stop the engine immediately.  0x 40  to 0x 7F  - Control steering, with 0x 40  being extreme left, and 0x 7F  being extreme right.  0x 80  to 0x BF  - Control acceleration, with 0x 80  being full throttle, and 0x BF  being zero throttle.  0x c0  to 0x FF  - Control steering, with 0x C0  being no braking, and 0x FF  being full power braking.", 
            "title": "Actuation"
        }
    ]
}